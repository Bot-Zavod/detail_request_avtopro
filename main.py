import logging
from os import getenv
from dotenv import load_dotenv

from telegram import Update
from telegram import InputFile
from telegram import KeyboardButton
from telegram import ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup

from telegram.ext import Updater
from telegram.ext import Filters
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import CallbackContext
from telegram.ext import CallbackQueryHandler
from telegram.ext import ConversationHandler

# Take environment variables from .env.
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

# States for ConversationHandler
ASK, CAR, VIN, DETAIL, LOCATION, CONTACT = range(6)

# Links for channels
CHANNELS = {
    'lviv': '@lvivavtopro', #
    'kyiv': '@kyivavtopro', #
    'sumy': '@sumyavtopro', #
    'volyn': '@volynavtopro', #
    'odesa': '@odessaavtopro', #
    'ivano-frankivsk': '@ivanofrankivskavtopro', #
    'ternopil': '@ternopilavtopro', #
    'khmelnitsky': '@khmelnitskyavtopro', #
    'zakarpattya': '@zakarpattiaavtopro', #
    'chernivetskya': '@chernivtsiavtopro', #
    'vinnytsia': '@vinnytsiaavtopro', #
    'zhytomyr': '@zhytomyravtopro', #
    'dnipro': '@dniproavtopro', #
    'zaporozhye': '@zaporozhyeavtopro', #
    'kropyvnytskyi': '@kropyvnytskyiavtopro', #
    'mykolaiv': '@nikolaevavtopro', #
    'poltava': '@poltavaavtopro', #
    'kharkiv': '@kharkivavtopro', #
    'kherson': '@khersonavtopro', #
    'cherkasy': '@cherkasyavtopro', #
    'chernigiv': '@chernihivavtopro', #
    'rivne': '@rivneavtopro', #
    'lugansk': '@luganskavtopro', #
    'donezk': '@donezkavtopto', #
}


def start(update: Update, context: CallbackContext) -> int:
    """Starts the conversation and asks the user about their gender."""
    user = update.message.from_user

    # Create the keyboard
    reply_keyboard = [
        [ KeyboardButton('–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥–µ—Ç–∞–ª—å ‚öôÔ∏è') ],
        [ KeyboardButton('–ù–∞—è–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏') ],
    ]

    # Send message
    update.message.reply_text(
        text="""–ù–∞—Ç–∏—Å–∫–∞–π "–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥–µ—Ç–∞–ª—å ‚öô", —â–æ–± —É –ø‚Äô—è—Ç—å –∫—Ä–æ–∫—ñ–≤ –∑–Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ —É —Å–≤–æ—î–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.""",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, 
            one_time_keyboard=True, 
            input_field_placeholder='–¢–∏—Å–Ω–∏',
            resize_keyboard=True
        )
    )

    # Logger
    logger.info("%s: send /start command;", user.first_name)


def helper(update: Update, context: CallbackContext) -> int:
    """Command Help /help"""
    user = update.message.from_user

    # Send message
    update.message.reply_text(
        text="""‚ÑπÔ∏è –í–∫–∞–∂–∏ —è–∫–æ–º–æ–≥–∞ –¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ, —è–∫—É —Å–∞–º–µ –∑–∞–ø—á–∞—Å—Ç–∏–Ω—É —Ç–∞ –Ω–∞ —è–∫–µ –∞–≤—Ç–æ —à—É–∫–∞—î—à. –í–∏–∫–æ–Ω—É–π –≤–∫–∞–∑—ñ–≤–∫–∏ –±–æ—Ç–∞, —â–æ–± –Ω–∞–¥–∞—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ–¥–∞–≤—Ü—è–º —Ç–∞ –ø—Ä–∏—Å–∫–æ—Ä–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –Ω–∞ —Å–≤—ñ–π –∑–∞–ø–∏—Ç."""
    )

    # Logger
    logger.info("%s: send /help command;", user.first_name)


def channel_list(update: Update, context: CallbackContext) -> int:
    """Send list of chats to user"""
    user = update.message.from_user

    # Send message
    update.message.reply_text(
        text="""–Ø–∫—â–æ –º–∞—î—à –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂, –∑–Ω–∞–π–¥–∏ –ø–æ–∫—É–ø—Ü—è —É –º—ñ—Å—Ü–µ–≤–æ–º—É —á–∞—Ç—ñ ü§ù:\n"""+'\n'.join([x for x in CHANNELS.values()])
    )

    # Logger
    logger.info("%s: ask channel list;", user.first_name)


def ask(update: Update, context: CallbackContext) -> int:
    """Stores the selected gender and asks for a photo."""
    user = update.message.from_user

    # Create user detail request in user_data
    context.user_data['detail_request'] = {}

    # Send message and remove keyboard
    update.message.reply_text(
        text="1Ô∏è‚É£ –í–∫–∞–∂–∏ –º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å —Å–≤–æ–≥–æ –∞–≤—Ç–æ:",
        reply_markup=ReplyKeyboardRemove(),
    )

    # Logger
    logger.info("%s: start creating the request", user.first_name)

    return CAR


def car(update: Update, context: CallbackContext) -> int:
    """Stores the photo and asks for a location."""
    user = update.message.from_user

    # Set car name to user_data
    value = update.message.text
    context.user_data['detail_request']['car'] = value

    # Send message
    update.message.reply_text(
        text="2Ô∏è‚É£–ù–∞–ø–∏—à–∏ VIN –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:"
    )

    # Logger
    logger.info("%s: set %s as car;", user.first_name, value)

    return VIN


def vin(update: Update, context: CallbackContext) -> int:
    """Stores the location and asks for some info about the user."""
    user = update.message.from_user

    # Set car VIN name to user_data
    value = update.message.text
    context.user_data['detail_request']['car_vin'] = value 

    # Send message
    update.message.reply_text(
        text="3Ô∏è‚É£–ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É –≤—Å—ñ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏, —è–∫—ñ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ:"
    )

    # Logger
    logger.info("%s: set VIN: %s;", user.first_name, value)

    return DETAIL

def error_vin(update: Update, context: CallbackContext) -> int:
    """Stores the location and asks for some info about the user."""
    user = update.message.from_user
    value = update.message.text

    # Send message
    update.message.reply_text(
        text="VIN –Ω–æ–º–µ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –í—ñ–Ω –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 17 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
    )

    # Logger
    logger.info("%s: send invalid VIN: %s;", user.first_name, value)

    return VIN


def detail(update: Update, context: CallbackContext) -> int:
    """Stores the photo and asks for a location."""
    user = update.message.from_user

    # Set detail_name to user_data
    value = update.message.text
    context.user_data['detail_request']['detail'] = value   

    # Make the keyboard
    keyboard = [
        [
            InlineKeyboardButton("–õ—å–≤—ñ–≤—Å—å–∫–∞", callback_data='lviv'),
            InlineKeyboardButton("–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞", callback_data='ivano-frankivsk'),
            InlineKeyboardButton("–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞", callback_data='ternopil')
        ],
        [
            InlineKeyboardButton("–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞", callback_data='khmelnitsky'),
            InlineKeyboardButton("–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞", callback_data='zakarpattya'),
            InlineKeyboardButton("–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞", callback_data='chernivetskya')
        ],
        [
            InlineKeyboardButton("–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", callback_data='vinnytsia'),
            InlineKeyboardButton("–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞", callback_data='zhytomyr'),
            InlineKeyboardButton("–ö–∏—ó–≤—Å—å–∫–∞", callback_data='kyiv')
        ],
        [
            InlineKeyboardButton("–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞", callback_data='dnipro'),
            InlineKeyboardButton("–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞", callback_data='zaporozhye'),
            InlineKeyboardButton("–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞", callback_data='kropyvnytskyi')
        ],
        [
            InlineKeyboardButton("–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞", callback_data='mykolaiv'),
            InlineKeyboardButton("–í–æ–ª–∏–Ω—Å—å–∫–∞", callback_data='volyn'),
            InlineKeyboardButton("–û–¥–µ—Å—å–∫–∞", callback_data='odesa')
        ],
        [
            InlineKeyboardButton("–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", callback_data='poltava'),
            InlineKeyboardButton("–°—É–º—Å—å–∫–∞", callback_data='sumy'),
            InlineKeyboardButton("–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", callback_data='kharkiv')
        ],
        [
            InlineKeyboardButton("–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞", callback_data='kherson'),
            InlineKeyboardButton("–ß–µ—Ä–∫–∞—Å—å–∫–∞", callback_data='cherkasy'),
            InlineKeyboardButton("–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞", callback_data='chernigiv')
        ],
        [   
            InlineKeyboardButton("–õ—É–≥–∞–Ω—Å—å–∫–∞", callback_data='lugansk'),
            InlineKeyboardButton("–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞", callback_data='rivne'),
            InlineKeyboardButton("–î–æ–Ω–µ—Ü—å–∫–∞", callback_data='donezk'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Send message    
    update.message.reply_text(
        text="4Ô∏è‚É£ –í–∫–∞–∂–∏ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å, —â–æ–± –Ω–∞—à—ñ –ø—Ä–æ–¥–∞–≤—Ü—ñ —à–≤–∏–¥—à–µ –Ω–∞–¥–∞–ª–∏ —Ç–æ–±—ñ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏:",
        reply_markup=reply_markup
    )

    # Logger
    logger.info("%s: ask detail: %s;", user.first_name, value)

    return LOCATION


def location(update: Update, context: CallbackContext) -> int:
    """Stores the location and asks for some info about the user."""
    query = update.callback_query
    query.answer()

    # Get callback
    chat_id = update.callback_query.message.chat.id
    message_id = update.callback_query.message.message_id

    # Set request location name to user_data
    location = update.callback_query.data
    context.user_data['detail_request']['location'] = location

    # Delete message with location inline keyboard
    context.bot.delete_message(chat_id, message_id)

    # Send message
    context.bot.send_message(
        chat_id=chat_id,
        text="""5‚É£ –ù–∞—Ç–∏—Å–∫–∞–π "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–º–µ—Äüìû", —â–æ–± –ø—Ä–æ–¥–∞–≤–µ—Ü—å –º—ñ–≥ –∑ —Ç–æ–±–æ—é –∑–≤'—è–∑–∞—Ç–∏—Å—è" """,
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton(
                    text='–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä üìû',
                    request_contact=True
                )]
            ], 
            one_time_keyboard=True, 
            input_field_placeholder='–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ ‚§µÔ∏è',
            resize_keyboard=True
        ),
    )

    # Logger
    logger.info("%s: set location: %s;", chat_id, location)

    return CONTACT


def error_location(update: Update, context: CallbackContext) -> int:
    """Stores the location and asks for some info about the user."""
    user = update.message.from_user
    value = update.message.text

    # Send message
    update.message.reply_text(
        text="–ù–∞–¥—ñ—à–ª–∏ –ª–æ–∫–∞—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ –≤–∏—â–µ."
    )

    # Logger
    logger.info("%s: send invalid location: %s;", user.first_name, value)

    return LOCATION


def contact(update: Update, context: CallbackContext) -> int:
    """Get contact info about the user."""
    user = update.message.from_user

    # Get request info from user_data
    detail_request = context.user_data.get('detail_request', 'Not found')

    # get channel name
    channel_name = CHANNELS[detail_request['location']]

    # set contact
    contact = update.message.contact
    context.user_data['detail_request']['contact'] = {}
    context.user_data['detail_request']['contact']['user_id'] = contact.user_id
    context.user_data['detail_request']['contact']['phone_number'] = contact.phone_number

    # Send message
    update.message.reply_text(
        text=f"–î—è–∫—É—é –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚úÖ\n–û—á—ñ–∫—É–π –¥–∑–≤—ñ–Ω–æ–∫ –≤—ñ–¥ –ø—Ä–æ–¥–∞–≤—Ü—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!\n–°—Ç–∞–Ω –∑–∞–ø–∏—Ç—É –º–æ–∂–Ω–∞ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —É –∫–∞–Ω–∞–ª—ñ - {channel_name}",
        reply_markup=ReplyKeyboardRemove()
    )

    # Logger 1
    logger.info("%s: set contact: %s;", user.first_name, contact)

    # Send request to channels
    context.bot.send_message(
        chat_id=channel_name,
        text=f"""‚úÖ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏–Ω—É!\n\nüöó –ê–≤—Ç–æ–º–æ–±—ñ–ª—å: {detail_request['car']};\n‚öôÔ∏è –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å: {detail_request['detail']};\nVIN –Ω–æ–º–µ—Ä: {detail_request['car_vin']};\n\n–û–±–ª–∞—Å—Ç—å: {detail_request['location']};\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {detail_request['contact']['phone_number']};""",
    )

    # Logger 2
    logger.info("Bot send %s`s request to %s;", user.first_name, channel_name)

    return ConversationHandler.END


def error_contact(update: Update, context: CallbackContext) -> int:
    """Stores the location and asks for some info about the user."""
    user = update.message.from_user
    value = update.message.text

    # Send message
    update.message.reply_text(
        text="–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ"
    )

    # Logger
    logger.info("%s: send invalid Contact: %s;", user.first_name, value)

    return CONTACT


def cancel(update: Update, context: CallbackContext) -> int:
    """Cancels and ends the conversation."""
    user = update.message.from_user    

    update.message.reply_text(
        text='–î—è–∫—É—î–º–æ –∑–∞ —É–≤–∞–≥—É, –¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è üëã', 
        reply_markup=ReplyKeyboardRemove()
    )

    # Logger
    logger.info("User %s canceled the conversation.", user.first_name)

    return ConversationHandler.END


def main() -> None:
    """Run the bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater(getenv("BOT_TOKEN"))

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Add conversation handler
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('^–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥–µ—Ç–∞–ª—å ‚öôÔ∏è$'), ask)
        ],
        states={
            CAR: [ 
                CommandHandler('cancel', cancel),
                MessageHandler(Filters.text, car)                
            ],

            VIN: [
                MessageHandler(
                    Filters.regex(r"^(?=.*[0-9])(?=.*[A-z])[0-9A-z-]{17}$"), vin
                ),
                CommandHandler('cancel', cancel),
                MessageHandler(Filters.text, error_vin)
            ],

            DETAIL: [
                CommandHandler('cancel', cancel),            
                MessageHandler(Filters.text, detail)                
            ],

            LOCATION: [
                CallbackQueryHandler(location),
                CommandHandler('cancel', cancel),
                MessageHandler(Filters.text, error_location)                
            ],

            CONTACT: [
                MessageHandler(Filters.contact, contact),
                CommandHandler('cancel', cancel),
                MessageHandler(Filters.text, error_contact)
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel)
        ]
    )

    dispatcher.add_handler(conv_handler)

    # command handler
    dispatcher.add_handler(CommandHandler("start", start)) 
    dispatcher.add_handler(CommandHandler("help", helper))

    dispatcher.add_handler(
        MessageHandler(Filters.regex('^–ù–∞—è–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏$'), channel_list)
    )   

    # Start the Bot
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()